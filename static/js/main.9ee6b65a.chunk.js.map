{"version":3,"sources":["Components/Display.tsx","Components/ButtonComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","style","counter","maxValue","color","error","ButtonComponent","Button","variant","size","onClick","click","disabled","disable","title","App","useState","setCounter","minValue","setMinValue","setMaxValue","setError","inputError","setLocal","localStorage","setItem","JSON","stringify","useEffect","minValueAsString","getItem","maxValueAsString","minValueLocal","parse","maxValueLocal","disableIncrButton","disableSetButton","Paper","elevation","square","type","value","onInput","e","currentTarget","valueAsNumber","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ee6b65a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    error?: string | boolean\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return(\r\n    <div className={\"display\"}>\r\n        <div style={props.counter === props.maxValue ? {color: \"red\"} : {color: \"\"}}>\r\n            {props.error? props.error : props.counter}\r\n\r\n        </div>\r\n    </div>\r\n    )\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\ntype ButtonType = {\r\n    title: string\r\n    counter?: number\r\n    maxValue?: number\r\n    disable?: boolean\r\n    click: () => void\r\n    //setLocal?: () => void\r\n}\r\n\r\nexport const ButtonComponent = (props: ButtonType) => {\r\n    return(\r\n        <Button variant={\"contained\"} color={\"primary\"} size={\"small\"}\r\n                onClick = {props.click}\r\n                // onClick={()=>{\r\n                //     props.click();\r\n                //     props.setLocal && props.setLocal()\r\n                // }}\r\n                disabled={props.disable}>{props.title}\r\n        </Button>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Paper} from \"@material-ui/core\";\nimport {Display} from \"./Components/Display\";\nimport {ButtonComponent} from \"./Components/ButtonComponent\";\n\nfunction App() {\n\n    const [counter, setCounter] = useState(0)\n    const [minValue, setMinValue] = useState(0)\n    const [maxValue, setMaxValue] = useState(1)\n\n    const [error, setError] = useState<string | boolean>('')\n    const minValueChange = (e: ChangeEvent<HTMLInputElement>) => setMinValue(e.currentTarget.valueAsNumber)\n    const maxValueChange = (e: ChangeEvent<HTMLInputElement>) => setMaxValue(e.currentTarget.valueAsNumber)\n\n    const incrHandler = () => setCounter(counter + 1)\n    const resetHandler = () => {\n        if (minValue >= maxValue) {\n            setMinValue(0)\n        } else if (minValue < 0) {\n            setMinValue(0);\n            setCounter(0)\n        } else {\n            setCounter(minValue)\n        }\n\n        if (maxValue < 1) {\n            setMaxValue(1)\n        }\n\n        // let minMin = localStorage.getItem(\"minValue\")\n        // if (minMin){setCounter(  JSON.parse(minMin)  )}\n\n        //setCounter(minValue)\n\n    }\n\n    // const onInputHandler = () => {\n    //     maxValue <= minValue ? setError(\"error\") : setError(\"\")\n    //     minValue < 0 ? setError(\"error\") : setError(\"\")\n    // }\n\n    let inputError = false\n    if (maxValue <= minValue) {\n        inputError = true\n    }\n    if (minValue < 0) {\n        inputError = true\n    }\n\n    const setHandler = () => {\n\n        if (minValue >= maxValue) {\n            setError(\"error\")\n        } else {\n            setCounter(minValue)\n            setLocal()\n            setError('')\n        }\n    }\n    const setLocal = () => {\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue)) // put max value to local storage as string\n        localStorage.setItem(\"minValue\", JSON.stringify(minValue)) // put min value to local storage as string\n    }\n    useEffect(() => { // set values from local storage when page will be reloaded\n        let minValueAsString = localStorage.getItem(\"minValue\") //get min value from local storage as string\n        let maxValueAsString = localStorage.getItem(\"maxValue\") // get max value from local storage as string\n\n        if (minValueAsString) {\n            let minValueLocal = JSON.parse(minValueAsString) // transform minValueAsString to number\n            setCounter(minValueLocal);  // set min value from local storage to Display\n            setMinValue(minValueLocal); // set min value from local storage to \"start value:\" input zone\n        }\n\n        if (maxValueAsString) {\n            let maxValueLocal = JSON.parse(maxValueAsString) // transform maxValueAsString to number\n            setMaxValue(maxValueLocal); //set max value from local storage to \"max value:\" input zone\n        }\n    }, [])\n\n    let disableIncrButton = false\n    if (counter >= maxValue) {\n        disableIncrButton = true\n    }\n\n    let disableSetButton = false\n    if (minValue >= maxValue) {\n        disableSetButton = true\n    }\n    if (minValue < 0) {\n        disableSetButton = true\n    }\n\n    let disableResetButton = false\n    if (minValue >= maxValue) {\n        disableResetButton = true\n    }\n\n    return (\n        <div className=\"App\">\n            <Paper elevation={6} square className={\"paper\"}>\n\n                <div className={\"inputs\"}>\n                    <div>max value:</div>\n                    <input className={inputError ? \"inputError\" : \"\"} type=\"number\" value={maxValue}\n                           onInput={maxValueChange}\n\n                    />\n                    <div>start value:</div>\n                    <input className={inputError ? \"inputError\" : \"\"} type=\"number\" value={minValue}\n                           onChange={minValueChange}/>\n                </div>\n\n                <div className={\"controls\"}>\n                    <ButtonComponent title={\"set\"} click={setHandler} disable={disableSetButton}\n                        //setLocal={setLocal}\n                    />\n                </div>\n\n            </Paper>\n\n            <Paper elevation={6} square className={\"paper\"}>\n\n                <Display counter={counter} maxValue={maxValue} error={error}/>\n\n                <div className={\"controls\"}>\n                    <ButtonComponent counter={counter} maxValue={maxValue} title={\"incr\"}\n                                     click={incrHandler} disable={disableIncrButton}\n                    />\n                    <ButtonComponent title={\"reset\"} click={resetHandler}/>\n                </div>\n\n            </Paper>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}