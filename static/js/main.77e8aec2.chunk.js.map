{"version":3,"sources":["Components/Display.tsx","Components/ButtonComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","style","counter","maxValue","color","ButtonComponent","Button","variant","size","onClick","click","disabled","value","App","useState","setCounter","minValue","setMinValue","setMaxValue","Paper","elevation","square","type","min","onInput","e","currentTarget","valueAsNumber","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAOaA,EAAU,SAACC,GAEpB,OACA,qBAAKC,UAAW,UAAhB,SACI,qBAAKC,MAAOF,EAAMG,UAAYH,EAAMI,SAAW,CAACC,MAAO,OAAS,CAACA,MAAO,IAAxE,SAA8EL,EAAMG,a,QCF/EG,EAAkB,SAACN,GAC5B,OACI,cAACO,EAAA,EAAD,CAAQC,QAAS,YAAaH,MAAO,UAAWI,KAAM,QAC9CC,QAASV,EAAMW,MACfC,WAAUZ,EAAMG,SAASH,EAAMG,UAAYH,EAAMI,SAFzD,SAE6EJ,EAAMa,SC0C5EC,MAhDf,WACI,IADW,EAEmBC,mBADN,GADb,mBAEJZ,EAFI,KAEKa,EAFL,OAGqBD,mBAAS,GAH9B,mBAGJE,EAHI,KAGMC,EAHN,OAIqBH,mBAAS,GAJ9B,mBAIJX,EAJI,KAIMe,EAJN,KAWX,OAEI,sBAAKlB,UAAU,MAAf,UACI,eAACmB,EAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,EAACrB,UAAW,QAAvC,UAEI,sBAAKA,UAAW,SAAhB,UAEQ,6CAFR,IAE8B,uBAAOsB,KAAK,SAASC,IAAK,EAAGX,MAAOT,EAAUqB,QAZjE,SAACC,GAAD,OAAsCP,EAAYO,EAAEC,cAAcC,kBAcrE,+CAJR,IAIgC,uBAAOL,KAAK,SAASC,IAAK,EAAGX,MAAOI,EAAUY,SAfnE,SAACH,GAAD,OAAsCR,EAAYQ,EAAEC,cAAcC,qBAkB7E,qBAAK3B,UAAW,WAAhB,SACI,cAAC,EAAD,CAAiBY,MAAO,MAAOF,MAf5B,kBAAMK,EAAWC,WAmB5B,eAACG,EAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,EAACrB,UAAW,QAAvC,UAEI,cAAC,EAAD,CAASE,QAASA,EAASC,SAAUA,IAErC,sBAAKH,UAAW,WAAhB,UAEI,cAAC,EAAD,CAAiBE,QAASA,EAASC,SAAUA,EAAUS,MAAO,OAC7CF,MA5Bb,kBAAMK,EAAWb,EAAU,MA8B/B,cAAC,EAAD,CAAiBU,MAAO,QAASF,MA7B5B,kBAAMK,EAAWC,gBCD3Ba,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.77e8aec2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return(\r\n    <div className={\"display\"}>\r\n        <div style={props.counter === props.maxValue ? {color: \"red\"} : {color: \"\"}}>{props.counter}</div>\r\n    </div>\r\n    )\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\ntype ButtonType = {\r\n    value: string\r\n    counter?: number\r\n    maxValue?: number\r\n    click: () => void\r\n}\r\n\r\nexport const ButtonComponent = (props: ButtonType) => {\r\n    return(\r\n        <Button variant={\"contained\"} color={\"primary\"} size={\"small\"}\r\n                onClick={props.click}\r\n                disabled={props.counter? props.counter === props.maxValue  : false}>{props.value}\r\n        </Button>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {Paper} from \"@material-ui/core\";\nimport {Display} from \"./Components/Display\";\nimport {ButtonComponent} from \"./Components/ButtonComponent\";\n\n\nfunction App() {\n    let initValue: number = 0\n    const [counter, setCounter] = useState(initValue)\n    const [minValue, setMinValue] = useState(0)\n    const [maxValue, setMaxValue] = useState(5)\n    const minValueChange = (e: ChangeEvent<HTMLInputElement>) => setMinValue(e.currentTarget.valueAsNumber)\n    const maxValueChange = (e: ChangeEvent<HTMLInputElement>) => setMaxValue(e.currentTarget.valueAsNumber)\n    const incrHandler = () => setCounter(counter + 1)\n    const resetHandler = () => setCounter(minValue)\n    const setHandler = () => setCounter(minValue)\n\n    return (\n\n        <div className=\"App\">\n            <Paper elevation={6} square className={\"paper\"}>\n\n                <div className={\"inputs\"}>\n\n                        <div>max value:</div> <input type=\"number\" min={1} value={maxValue} onInput={maxValueChange}/>\n\n                        <div>start value:</div> <input type=\"number\" min={0} value={minValue} onChange={minValueChange}/>\n                </div>\n\n                <div className={\"controls\"}>\n                    <ButtonComponent value={\"set\"} click={setHandler}/>\n                </div>\n            </Paper>\n\n            <Paper elevation={6} square className={\"paper\"}>\n\n                <Display counter={counter} maxValue={maxValue}/>\n\n                <div className={\"controls\"}>\n\n                    <ButtonComponent counter={counter} maxValue={maxValue} value={\"incr\"}\n                                     click={incrHandler}/>\n\n                    <ButtonComponent value={\"reset\"} click={resetHandler}/>\n\n                </div>\n\n            </Paper>\n\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}