{"version":3,"sources":["Components/Display.tsx","Components/ButtonComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","style","counter","maxValue","color","ButtonComponent","Button","variant","size","onClick","click","setLocal","disabled","disable","title","App","useState","setCounter","minValue","setMinValue","setMaxValue","useEffect","minValueAsString","localStorage","getItem","maxValueAsString","minValueLocal","JSON","parse","maxValueLocal","disableButton","Paper","elevation","square","type","min","value","onInput","e","currentTarget","valueAsNumber","max","onChange","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAOaA,EAAU,SAACC,GAEpB,OACA,qBAAKC,UAAW,UAAhB,SACI,qBAAKC,MAAOF,EAAMG,UAAYH,EAAMI,SAAW,CAACC,MAAO,OAAS,CAACA,MAAO,IAAxE,SAA8EL,EAAMG,a,QCA/EG,EAAkB,SAACN,GAC5B,OACI,cAACO,EAAA,EAAD,CAAQC,QAAS,YAAaH,MAAO,UAAWI,KAAM,QAC9CC,QAAS,WACLV,EAAMW,QACNX,EAAMY,UAAYZ,EAAMY,YAE5BC,SAAUb,EAAMc,QALxB,SAKkCd,EAAMe,SCsDjCC,MAlEf,WACI,IADW,EAEmBC,mBADN,GADb,mBAEJd,EAFI,KAEKe,EAFL,OAGqBD,mBAAS,GAH9B,mBAGJE,EAHI,KAGMC,EAHN,OAIqBH,mBAAS,GAJ9B,mBAIJb,EAJI,KAIMiB,EAJN,KAcXC,qBAAU,WACN,IAAIC,EAAmBC,aAAaC,QAAQ,YACxCC,EAAmBF,aAAaC,QAAQ,YAE5C,GAAIF,EAAkB,CAClB,IAAII,EAAgBC,KAAKC,MAAMN,GAC/BL,EAAWS,GACXP,EAAYO,GAGhB,GAAID,EAAkB,CAClB,IAAII,EAAgBF,KAAKC,MAAMH,GAC/BL,EAAYS,MAEjB,IAEH,IAAIC,GAAgB,EAGpB,OAFG5B,GAAWC,IAAU2B,GAAgB,GAGpC,sBAAK9B,UAAU,MAAf,UACI,eAAC+B,EAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,EAACjC,UAAW,QAAvC,UAEI,sBAAKA,UAAW,SAAhB,UACI,6CACA,uBAAOkC,KAAK,SAASC,IAAKjB,EAAW,EAAGkB,MAAOjC,EAAUkC,QAjClD,SAACC,GAAD,OAAsClB,EAAYkB,EAAEC,cAAcC,kBAkCzE,+CACA,uBAAON,KAAK,SAASO,IAAKtC,EAAW,EAAGiC,MAAOlB,EAAUwB,SApClD,SAACJ,GAAD,OAAsCnB,EAAYmB,EAAEC,cAAcC,qBAuC7E,qBAAKxC,UAAW,WAAhB,SACI,cAAC,EAAD,CAAiBc,MAAO,MAAOJ,MApC5B,kBAAMO,EAAWC,IAoC8BP,SAnCjD,WACbY,aAAaoB,QAAQ,WAAYhB,KAAKiB,UAAUzC,IAChDoB,aAAaoB,QAAQ,WAAYhB,KAAKiB,UAAU1B,YAsC5C,eAACa,EAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,EAACjC,UAAW,QAAvC,UAEI,cAAC,EAAD,CAASE,QAASA,EAASC,SAAUA,IAErC,sBAAKH,UAAW,WAAhB,UACI,cAAC,EAAD,CAAiBE,QAASA,EAASC,SAAUA,EAAUW,MAAO,OAC7CJ,MAjDb,kBAAMO,EAAWf,EAAU,IAiDMW,QAASiB,IAE9C,cAAC,EAAD,CAAiBhB,MAAO,QAASJ,MAlD5B,kBAAMO,EAAWC,gBCA3B2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f5adeb14.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    return(\r\n    <div className={\"display\"}>\r\n        <div style={props.counter === props.maxValue ? {color: \"red\"} : {color: \"\"}}>{props.counter}</div>\r\n    </div>\r\n    )\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\ntype ButtonType = {\r\n    title: string\r\n    counter?: number\r\n    maxValue?: number\r\n    disable?: boolean\r\n    click: () => void\r\n    setLocal?: () => void\r\n}\r\n\r\nexport const ButtonComponent = (props: ButtonType) => {\r\n    return(\r\n        <Button variant={\"contained\"} color={\"primary\"} size={\"small\"}\r\n                onClick={()=>{\r\n                    props.click();\r\n                    props.setLocal && props.setLocal()\r\n                }}\r\n                disabled={props.disable}>{props.title}\r\n        </Button>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Paper} from \"@material-ui/core\";\nimport {Display} from \"./Components/Display\";\nimport {ButtonComponent} from \"./Components/ButtonComponent\";\n\nfunction App() {\n    let initValue: number = 0\n    const [counter, setCounter] = useState(initValue)\n    const [minValue, setMinValue] = useState(0)\n    const [maxValue, setMaxValue] = useState(1)\n    const minValueChange = (e: ChangeEvent<HTMLInputElement>) => setMinValue(e.currentTarget.valueAsNumber)\n    const maxValueChange = (e: ChangeEvent<HTMLInputElement>) => setMaxValue(e.currentTarget.valueAsNumber)\n    const incrHandler = () => setCounter(counter + 1)\n    const resetHandler = () => setCounter(minValue)\n    const setHandler = () => setCounter(minValue)\n    const setLocal = () => {\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue)) // put max value to local storage as string\n        localStorage.setItem(\"minValue\", JSON.stringify(minValue)) // put min value to local storage as string\n    }\n    useEffect(() => { // set values from local storage when page will be reloaded\n        let minValueAsString = localStorage.getItem(\"minValue\") //get min value from local storage as string\n        let maxValueAsString = localStorage.getItem(\"maxValue\") // get max value from local storage as string\n\n        if (minValueAsString) {\n            let minValueLocal = JSON.parse(minValueAsString) // transform minValueAsString to number\n            setCounter(minValueLocal);  // set min value from local storage to Display\n            setMinValue(minValueLocal); // set min value from local storage to \"start value:\" input zone\n        }\n\n        if (maxValueAsString) {\n            let maxValueLocal = JSON.parse(maxValueAsString) // transform maxValueAsString to number\n            setMaxValue(maxValueLocal); //set max value from local storage to \"max value:\" input zone\n        }\n    }, [])\n\n    let disableButton = false\n    if(counter >= maxValue){disableButton = true}\n\n    return (\n        <div className=\"App\">\n            <Paper elevation={6} square className={\"paper\"}>\n\n                <div className={\"inputs\"}>\n                    <div>max value:</div>\n                    <input type=\"number\" min={minValue + 1} value={maxValue} onInput={maxValueChange}/>\n                    <div>start value:</div>\n                    <input type=\"number\" max={maxValue - 1} value={minValue} onChange={minValueChange}/>\n                </div>\n\n                <div className={\"controls\"}>\n                    <ButtonComponent title={\"set\"} click={setHandler} setLocal={setLocal}/>\n                </div>\n\n            </Paper>\n\n            <Paper elevation={6} square className={\"paper\"}>\n\n                <Display counter={counter} maxValue={maxValue}/>\n\n                <div className={\"controls\"}>\n                    <ButtonComponent counter={counter} maxValue={maxValue} title={\"incr\"}\n                                     click={incrHandler} disable={disableButton}\n                    />\n                    <ButtonComponent title={\"reset\"} click={resetHandler}/>\n                </div>\n\n            </Paper>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}